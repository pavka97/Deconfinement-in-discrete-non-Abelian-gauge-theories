/var/spool/pbs/mom_priv/jobs/4243675.hpc-head-n1.unitn.it.SC: line 20: 60280 Killed                  julia $mydir/D_4_dmrg_corner_ch_1.jl $N $g 1 200
/var/spool/pbs/mom_priv/jobs/4243675.hpc-head-n1.unitn.it.SC: line 20: 14931 Killed                  julia $mydir/D_4_dmrg_corner_ch_1.jl $N $g 1 200
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
  [1] Array
    @ ./boot.jl:471 [inlined]
  [2] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/abstractarray/similar.jl:10 [inlined]
  [3] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensorstorage/similar.jl:40 [inlined]
  [4] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensor/similar.jl:22 [inlined]
  [5] contraction_output
    @ ~/.julia/packages/NDTensors/h1tIi/src/dense/tensoralgebra/contract.jl:3 [inlined]
  [6] contraction_output
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:62 [inlined]
  [7] contract(tensor1::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor1::NTuple{4, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor2::Tuple{Int64, Int64, Int64}, labelsoutput_tensor::NTuple{5, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:108
  [8] contract(::Type{NDTensors.CanContract{NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}}}, tensor1::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor1::NTuple{4, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor2::Tuple{Int64, Int64, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:91
  [9] contract
    @ ~/.julia/packages/SimpleTraits/l1ZsK/src/SimpleTraits.jl:331 [inlined]
 [10] _contract(A::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, B::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}})
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:3
 [11] _contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:9
 [12] contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:74
 [13] *
    @ ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:61 [inlined]
 [14] contract(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:51
 [15] product(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:71
 [16] AbstractProjMPO
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:87 [inlined]
 [17] apply
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/apply.jl:2 [inlined]
 [18] lanczosrecurrence(operator::ProjMPO, V::KrylovKit.OrthonormalBasis{ITensor}, β::Float64, orth::KrylovKit.ModifiedGramSchmidt2)
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/factorizations/lanczos.jl:317
 [19] expand!(iter::KrylovKit.LanczosIterator{ProjMPO, ITensor, KrylovKit.ModifiedGramSchmidt2}, state::KrylovKit.LanczosFactorization{ITensor, Float64}; verbosity::Int64)
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/factorizations/lanczos.jl:251
 [20] eigsolve(A::ProjMPO, x₀::ITensor, howmany::Int64, which::Symbol, alg::KrylovKit.Lanczos{KrylovKit.ModifiedGramSchmidt2, Float64}; alg_rrule::KrylovKit.Arnoldi{KrylovKit.ModifiedGramSchmidt2, Float64})
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/lanczos.jl:81
 [21] #eigsolve#44
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/eigsolve.jl:218 [inlined]
 [22] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:239 [inlined]
 [23] macro expansion
    @ ~/.julia/packages/TimerOutputs/Lw5SP/src/TimerOutput.jl:253 [inlined]
 [24] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:238 [inlined]
 [25] macro expansion
    @ ./timing.jl:382 [inlined]
 [26] dmrg(PH::ProjMPO, psi0::MPS, sweeps::Sweeps; which_decomp::Nothing, svd_alg::Nothing, observer::DMRGObserver{Float64}, outputlevel::Int64, write_when_maxdim_exceeds::Nothing, write_path::String, eigsolve_tol::Float64, eigsolve_krylovdim::Int64, eigsolve_maxiter::Int64, eigsolve_verbosity::Int64, eigsolve_which_eigenvalue::Symbol, ishermitian::Bool)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:206
 [27] #dmrg#509
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:28 [inlined]
 [28] #dmrg#515
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:388 [inlined]
 [29] main(N::Int64, g::Float64, penalty::Float64, D_max::Int64)
    @ Main ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:178
 [30] top-level scope
    @ ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
in expression starting at /home/matteo.wauters/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
  [1] Array
    @ ./boot.jl:471 [inlined]
  [2] similar
    @ ./array.jl:379 [inlined]
  [3] permutedims
    @ ./multidimensional.jl:1560 [inlined]
  [4] permutedims
    @ ~/.julia/packages/NDTensors/h1tIi/src/array/permutedims.jl:8 [inlined]
  [5] _contract!(CT::Array{ComplexF64, 4}, AT::Array{ComplexF64, 5}, BT::Array{ComplexF64, 3}, props::NDTensors.ContractionProperties{5, 3, 4}, α::Bool, β::Bool)
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/abstractarray/tensoralgebra/contract.jl:126
  [6] _contract!(CT::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, AT::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, BT::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, props::NDTensors.ContractionProperties{5, 3, 4}, α::Bool, β::Bool)
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/dense/tensoralgebra/contract.jl:228
  [7] contract!
    @ ~/.julia/packages/NDTensors/h1tIi/src/dense/tensoralgebra/contract.jl:211 [inlined]
  [8] contract! (repeats 2 times)
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:165 [inlined]
  [9] _contract!!(output_tensor::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelsoutput_tensor::NTuple{4, Int64}, tensor1::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor1::NTuple{5, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor2::Tuple{Int64, Int64, Int64}, α::Int64, β::Int64)
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:143
 [10] _contract!!
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:131 [inlined]
 [11] contract!!
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:219 [inlined]
 [12] contract!!
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:188 [inlined]
 [13] contract(tensor1::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor1::NTuple{5, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor2::Tuple{Int64, Int64, Int64}, labelsoutput_tensor::NTuple{4, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:113
 [14] contract(::Type{NDTensors.CanContract{NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}}}, tensor1::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor1::NTuple{5, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor2::Tuple{Int64, Int64, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:91
 [15] contract
    @ ~/.julia/packages/SimpleTraits/l1ZsK/src/SimpleTraits.jl:331 [inlined]
 [16] _contract(A::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, B::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}})
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:3
 [17] _contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:9
 [18] contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:74
 [19] *
    @ ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:61 [inlined]
 [20] contract(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:51
 [21] product(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:71
 [22] AbstractProjMPO
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:87 [inlined]
 [23] apply
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/apply.jl:2 [inlined]
 [24] lanczosrecurrence(operator::ProjMPO, V::KrylovKit.OrthonormalBasis{ITensor}, β::Float64, orth::KrylovKit.ModifiedGramSchmidt2)
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/factorizations/lanczos.jl:317
 [25] expand!(iter::KrylovKit.LanczosIterator{ProjMPO, ITensor, KrylovKit.ModifiedGramSchmidt2}, state::KrylovKit.LanczosFactorization{ITensor, Float64}; verbosity::Int64)
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/factorizations/lanczos.jl:251
 [26] eigsolve(A::ProjMPO, x₀::ITensor, howmany::Int64, which::Symbol, alg::KrylovKit.Lanczos{KrylovKit.ModifiedGramSchmidt2, Float64}; alg_rrule::KrylovKit.Arnoldi{KrylovKit.ModifiedGramSchmidt2, Float64})
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/lanczos.jl:81
 [27] #eigsolve#44
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/eigsolve.jl:218 [inlined]
 [28] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:239 [inlined]
 [29] macro expansion
    @ ~/.julia/packages/TimerOutputs/Lw5SP/src/TimerOutput.jl:253 [inlined]
 [30] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:238 [inlined]
 [31] macro expansion
    @ ./timing.jl:382 [inlined]
 [32] dmrg(PH::ProjMPO, psi0::MPS, sweeps::Sweeps; which_decomp::Nothing, svd_alg::Nothing, observer::DMRGObserver{Float64}, outputlevel::Int64, write_when_maxdim_exceeds::Nothing, write_path::String, eigsolve_tol::Float64, eigsolve_krylovdim::Int64, eigsolve_maxiter::Int64, eigsolve_verbosity::Int64, eigsolve_which_eigenvalue::Symbol, ishermitian::Bool)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:206
 [33] #dmrg#509
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:28 [inlined]
 [34] #dmrg#515
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:388 [inlined]
 [35] main(N::Int64, g::Float64, penalty::Float64, D_max::Int64)
    @ Main ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:178
 [36] top-level scope
    @ ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
in expression starting at /home/matteo.wauters/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
  [1] Array
    @ ./boot.jl:471 [inlined]
  [2] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/abstractarray/similar.jl:10 [inlined]
  [3] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensorstorage/similar.jl:40 [inlined]
  [4] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensor/similar.jl:22 [inlined]
  [5] contraction_output
    @ ~/.julia/packages/NDTensors/h1tIi/src/dense/tensoralgebra/contract.jl:3 [inlined]
  [6] contraction_output
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:62 [inlined]
  [7] contract(tensor1::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor1::NTuple{4, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor2::Tuple{Int64, Int64, Int64}, labelsoutput_tensor::NTuple{5, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:108
  [8] contract(::Type{NDTensors.CanContract{NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}}}, tensor1::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor1::NTuple{4, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor2::Tuple{Int64, Int64, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:91
  [9] contract
    @ ~/.julia/packages/SimpleTraits/l1ZsK/src/SimpleTraits.jl:331 [inlined]
 [10] _contract(A::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, B::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}})
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:3
 [11] _contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:9
 [12] contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:74
 [13] *
    @ ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:61 [inlined]
 [14] contract(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:51
 [15] product(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:71
 [16] AbstractProjMPO
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:87 [inlined]
 [17] apply
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/apply.jl:2 [inlined]
 [18] lanczosrecurrence(operator::ProjMPO, V::KrylovKit.OrthonormalBasis{ITensor}, β::Float64, orth::KrylovKit.ModifiedGramSchmidt2)
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/factorizations/lanczos.jl:317
 [19] expand!(iter::KrylovKit.LanczosIterator{ProjMPO, ITensor, KrylovKit.ModifiedGramSchmidt2}, state::KrylovKit.LanczosFactorization{ITensor, Float64}; verbosity::Int64)
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/factorizations/lanczos.jl:251
 [20] eigsolve(A::ProjMPO, x₀::ITensor, howmany::Int64, which::Symbol, alg::KrylovKit.Lanczos{KrylovKit.ModifiedGramSchmidt2, Float64}; alg_rrule::KrylovKit.Arnoldi{KrylovKit.ModifiedGramSchmidt2, Float64})
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/lanczos.jl:81
 [21] #eigsolve#44
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/eigsolve.jl:218 [inlined]
 [22] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:239 [inlined]
 [23] macro expansion
    @ ~/.julia/packages/TimerOutputs/Lw5SP/src/TimerOutput.jl:253 [inlined]
 [24] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:238 [inlined]
 [25] macro expansion
    @ ./timing.jl:382 [inlined]
 [26] dmrg(PH::ProjMPO, psi0::MPS, sweeps::Sweeps; which_decomp::Nothing, svd_alg::Nothing, observer::DMRGObserver{Float64}, outputlevel::Int64, write_when_maxdim_exceeds::Nothing, write_path::String, eigsolve_tol::Float64, eigsolve_krylovdim::Int64, eigsolve_maxiter::Int64, eigsolve_verbosity::Int64, eigsolve_which_eigenvalue::Symbol, ishermitian::Bool)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:206
 [27] #dmrg#509
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:28 [inlined]
 [28] #dmrg#515
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:388 [inlined]
 [29] main(N::Int64, g::Float64, penalty::Float64, D_max::Int64)
    @ Main ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:178
 [30] top-level scope
    @ ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
in expression starting at /home/matteo.wauters/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
  [1] Array
    @ ./boot.jl:471 [inlined]
  [2] similar
    @ ./array.jl:379 [inlined]
  [3] permutedims
    @ ./multidimensional.jl:1560 [inlined]
  [4] permutedims
    @ ~/.julia/packages/NDTensors/h1tIi/src/array/permutedims.jl:8 [inlined]
  [5] _contract!(CT::Array{ComplexF64, 4}, AT::Array{ComplexF64, 5}, BT::Array{ComplexF64, 3}, props::NDTensors.ContractionProperties{5, 3, 4}, α::Bool, β::Bool)
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/abstractarray/tensoralgebra/contract.jl:126
  [6] _contract!(CT::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, AT::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, BT::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, props::NDTensors.ContractionProperties{5, 3, 4}, α::Bool, β::Bool)
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/dense/tensoralgebra/contract.jl:228
  [7] contract!
    @ ~/.julia/packages/NDTensors/h1tIi/src/dense/tensoralgebra/contract.jl:211 [inlined]
  [8] contract! (repeats 2 times)
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:165 [inlined]
  [9] _contract!!(output_tensor::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelsoutput_tensor::NTuple{4, Int64}, tensor1::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor1::NTuple{5, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor2::Tuple{Int64, Int64, Int64}, α::Int64, β::Int64)
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:143
 [10] _contract!!
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:131 [inlined]
 [11] contract!!
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:219 [inlined]
 [12] contract!!
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:188 [inlined]
 [13] contract(tensor1::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor1::NTuple{5, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor2::Tuple{Int64, Int64, Int64}, labelsoutput_tensor::NTuple{4, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:113
 [14] contract(::Type{NDTensors.CanContract{NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}}}, tensor1::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor1::NTuple{5, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor2::Tuple{Int64, Int64, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:91
 [15] contract
    @ ~/.julia/packages/SimpleTraits/l1ZsK/src/SimpleTraits.jl:331 [inlined]
 [16] _contract(A::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, B::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}})
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:3
 [17] _contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:9
 [18] contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:74
 [19] *
    @ ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:61 [inlined]
 [20] contract(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:51
 [21] product(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:71
 [22] AbstractProjMPO
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:87 [inlined]
 [23] apply
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/apply.jl:2 [inlined]
 [24] lanczosrecurrence(operator::ProjMPO, V::KrylovKit.OrthonormalBasis{ITensor}, β::Float64, orth::KrylovKit.ModifiedGramSchmidt2)
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/factorizations/lanczos.jl:317
 [25] expand!(iter::KrylovKit.LanczosIterator{ProjMPO, ITensor, KrylovKit.ModifiedGramSchmidt2}, state::KrylovKit.LanczosFactorization{ITensor, Float64}; verbosity::Int64)
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/factorizations/lanczos.jl:251
 [26] eigsolve(A::ProjMPO, x₀::ITensor, howmany::Int64, which::Symbol, alg::KrylovKit.Lanczos{KrylovKit.ModifiedGramSchmidt2, Float64}; alg_rrule::KrylovKit.Arnoldi{KrylovKit.ModifiedGramSchmidt2, Float64})
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/lanczos.jl:81
 [27] #eigsolve#44
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/eigsolve.jl:218 [inlined]
 [28] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:239 [inlined]
 [29] macro expansion
    @ ~/.julia/packages/TimerOutputs/Lw5SP/src/TimerOutput.jl:253 [inlined]
 [30] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:238 [inlined]
 [31] macro expansion
    @ ./timing.jl:382 [inlined]
 [32] dmrg(PH::ProjMPO, psi0::MPS, sweeps::Sweeps; which_decomp::Nothing, svd_alg::Nothing, observer::DMRGObserver{Float64}, outputlevel::Int64, write_when_maxdim_exceeds::Nothing, write_path::String, eigsolve_tol::Float64, eigsolve_krylovdim::Int64, eigsolve_maxiter::Int64, eigsolve_verbosity::Int64, eigsolve_which_eigenvalue::Symbol, ishermitian::Bool)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:206
 [33] #dmrg#509
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:28 [inlined]
 [34] #dmrg#515
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:388 [inlined]
 [35] main(N::Int64, g::Float64, penalty::Float64, D_max::Int64)
    @ Main ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:178
 [36] top-level scope
    @ ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
in expression starting at /home/matteo.wauters/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
  [1] Array
    @ ./boot.jl:471 [inlined]
  [2] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/abstractarray/similar.jl:10 [inlined]
  [3] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensorstorage/similar.jl:40 [inlined]
  [4] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensor/similar.jl:22 [inlined]
  [5] contraction_output
    @ ~/.julia/packages/NDTensors/h1tIi/src/dense/tensoralgebra/contract.jl:3 [inlined]
  [6] contraction_output
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:62 [inlined]
  [7] contract(tensor1::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor1::NTuple{5, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor2::NTuple{4, Int64}, labelsoutput_tensor::NTuple{5, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:108
  [8] contract(::Type{NDTensors.CanContract{NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}}}, tensor1::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor1::NTuple{5, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor2::NTuple{4, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:91
  [9] contract
    @ ~/.julia/packages/SimpleTraits/l1ZsK/src/SimpleTraits.jl:331 [inlined]
 [10] _contract(A::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, B::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}})
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:3
 [11] _contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:9
 [12] contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:74
 [13] *
    @ ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:61 [inlined]
 [14] contract(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:51
 [15] product(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:71
 [16] AbstractProjMPO
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:87 [inlined]
 [17] apply
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/apply.jl:2 [inlined]
 [18] lanczosrecurrence(operator::ProjMPO, V::KrylovKit.OrthonormalBasis{ITensor}, β::Float64, orth::KrylovKit.ModifiedGramSchmidt2)
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/factorizations/lanczos.jl:317
 [19] expand!(iter::KrylovKit.LanczosIterator{ProjMPO, ITensor, KrylovKit.ModifiedGramSchmidt2}, state::KrylovKit.LanczosFactorization{ITensor, Float64}; verbosity::Int64)
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/factorizations/lanczos.jl:251
 [20] eigsolve(A::ProjMPO, x₀::ITensor, howmany::Int64, which::Symbol, alg::KrylovKit.Lanczos{KrylovKit.ModifiedGramSchmidt2, Float64}; alg_rrule::KrylovKit.Arnoldi{KrylovKit.ModifiedGramSchmidt2, Float64})
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/lanczos.jl:81
 [21] #eigsolve#44
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/eigsolve.jl:218 [inlined]
 [22] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:239 [inlined]
 [23] macro expansion
    @ ~/.julia/packages/TimerOutputs/Lw5SP/src/TimerOutput.jl:253 [inlined]
 [24] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:238 [inlined]
 [25] macro expansion
    @ ./timing.jl:382 [inlined]
 [26] dmrg(PH::ProjMPO, psi0::MPS, sweeps::Sweeps; which_decomp::Nothing, svd_alg::Nothing, observer::DMRGObserver{Float64}, outputlevel::Int64, write_when_maxdim_exceeds::Nothing, write_path::String, eigsolve_tol::Float64, eigsolve_krylovdim::Int64, eigsolve_maxiter::Int64, eigsolve_verbosity::Int64, eigsolve_which_eigenvalue::Symbol, ishermitian::Bool)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:206
 [27] #dmrg#509
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:28 [inlined]
 [28] #dmrg#515
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:388 [inlined]
 [29] main(N::Int64, g::Float64, penalty::Float64, D_max::Int64)
    @ Main ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:178
 [30] top-level scope
    @ ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
in expression starting at /home/matteo.wauters/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
  [1] Array
    @ ./boot.jl:471 [inlined]
  [2] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/abstractarray/similar.jl:10 [inlined]
  [3] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensorstorage/similar.jl:40 [inlined]
  [4] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensor/similar.jl:22 [inlined]
  [5] contraction_output
    @ ~/.julia/packages/NDTensors/h1tIi/src/dense/tensoralgebra/contract.jl:3 [inlined]
  [6] contraction_output
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:62 [inlined]
  [7] contract(tensor1::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor1::NTuple{5, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor2::NTuple{4, Int64}, labelsoutput_tensor::NTuple{5, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:108
  [8] contract(::Type{NDTensors.CanContract{NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}}}, tensor1::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor1::NTuple{5, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor2::NTuple{4, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:91
  [9] contract
    @ ~/.julia/packages/SimpleTraits/l1ZsK/src/SimpleTraits.jl:331 [inlined]
 [10] _contract(A::NDTensors.DenseTensor{ComplexF64, 5, NTuple{5, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, B::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}})
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:3
 [11] _contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:9
 [12] contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:74
 [13] *
    @ ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:61 [inlined]
 [14] contract(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:51
 [15] product(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:71
 [16] AbstractProjMPO
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:87 [inlined]
 [17] apply
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/apply.jl:2 [inlined]
 [18] initialize(iter::KrylovKit.LanczosIterator{ProjMPO, ITensor, KrylovKit.ModifiedGramSchmidt2}; verbosity::Int64)
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/factorizations/lanczos.jl:179
 [19] eigsolve(A::ProjMPO, x₀::ITensor, howmany::Int64, which::Symbol, alg::KrylovKit.Lanczos{KrylovKit.ModifiedGramSchmidt2, Float64}; alg_rrule::KrylovKit.Arnoldi{KrylovKit.ModifiedGramSchmidt2, Float64})
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/lanczos.jl:16
 [20] #eigsolve#44
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/eigsolve.jl:218 [inlined]
 [21] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:239 [inlined]
 [22] macro expansion
    @ ~/.julia/packages/TimerOutputs/Lw5SP/src/TimerOutput.jl:253 [inlined]
 [23] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:238 [inlined]
 [24] macro expansion
    @ ./timing.jl:382 [inlined]
 [25] dmrg(PH::ProjMPO, psi0::MPS, sweeps::Sweeps; which_decomp::Nothing, svd_alg::Nothing, observer::DMRGObserver{Float64}, outputlevel::Int64, write_when_maxdim_exceeds::Nothing, write_path::String, eigsolve_tol::Float64, eigsolve_krylovdim::Int64, eigsolve_maxiter::Int64, eigsolve_verbosity::Int64, eigsolve_which_eigenvalue::Symbol, ishermitian::Bool)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:206
 [26] #dmrg#509
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:28 [inlined]
 [27] #dmrg#515
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:388 [inlined]
 [28] main(N::Int64, g::Float64, penalty::Float64, D_max::Int64)
    @ Main ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:178
 [29] top-level scope
    @ ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
in expression starting at /home/matteo.wauters/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
  [1] Array
    @ ./boot.jl:471 [inlined]
  [2] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/abstractarray/similar.jl:10 [inlined]
  [3] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensorstorage/similar.jl:40 [inlined]
  [4] similar
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensor/similar.jl:22 [inlined]
  [5] contraction_output
    @ ~/.julia/packages/NDTensors/h1tIi/src/dense/tensoralgebra/contract.jl:3 [inlined]
  [6] contraction_output
    @ ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:62 [inlined]
  [7] contract(tensor1::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor1::NTuple{4, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labelstensor2::Tuple{Int64, Int64, Int64}, labelsoutput_tensor::NTuple{5, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:108
  [8] contract(::Type{NDTensors.CanContract{NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}}}, tensor1::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor1::NTuple{4, Int64}, tensor2::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, labels_tensor2::Tuple{Int64, Int64, Int64})
    @ NDTensors ~/.julia/packages/NDTensors/h1tIi/src/tensoroperations/generic_tensor_operations.jl:91
  [9] contract
    @ ~/.julia/packages/SimpleTraits/l1ZsK/src/SimpleTraits.jl:331 [inlined]
 [10] _contract(A::NDTensors.DenseTensor{ComplexF64, 4, NTuple{4, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}}, B::NDTensors.DenseTensor{ComplexF64, 3, Tuple{Index{Int64}, Index{Int64}, Index{Int64}}, NDTensors.Dense{ComplexF64, Vector{ComplexF64}}})
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:3
 [11] _contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:9
 [12] contract(A::ITensor, B::ITensor)
    @ ITensors ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:74
 [13] *
    @ ~/.julia/packages/ITensors/kHYfQ/src/tensor_operations/tensor_algebra.jl:61 [inlined]
 [14] contract(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:51
 [15] product(P::ProjMPO, v::ITensor)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:71
 [16] AbstractProjMPO
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/abstractprojmpo/abstractprojmpo.jl:87 [inlined]
 [17] apply
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/apply.jl:2 [inlined]
 [18] lanczosrecurrence(operator::ProjMPO, V::KrylovKit.OrthonormalBasis{ITensor}, β::Float64, orth::KrylovKit.ModifiedGramSchmidt2)
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/factorizations/lanczos.jl:317
 [19] expand!(iter::KrylovKit.LanczosIterator{ProjMPO, ITensor, KrylovKit.ModifiedGramSchmidt2}, state::KrylovKit.LanczosFactorization{ITensor, Float64}; verbosity::Int64)
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/factorizations/lanczos.jl:251
 [20] eigsolve(A::ProjMPO, x₀::ITensor, howmany::Int64, which::Symbol, alg::KrylovKit.Lanczos{KrylovKit.ModifiedGramSchmidt2, Float64}; alg_rrule::KrylovKit.Arnoldi{KrylovKit.ModifiedGramSchmidt2, Float64})
    @ KrylovKit ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/lanczos.jl:81
 [21] #eigsolve#44
    @ ~/.julia/packages/KrylovKit/y3tnZ/src/eigsolve/eigsolve.jl:218 [inlined]
 [22] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:239 [inlined]
 [23] macro expansion
    @ ~/.julia/packages/TimerOutputs/Lw5SP/src/TimerOutput.jl:253 [inlined]
 [24] macro expansion
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:238 [inlined]
 [25] macro expansion
    @ ./timing.jl:382 [inlined]
 [26] dmrg(PH::ProjMPO, psi0::MPS, sweeps::Sweeps; which_decomp::Nothing, svd_alg::Nothing, observer::DMRGObserver{Float64}, outputlevel::Int64, write_when_maxdim_exceeds::Nothing, write_path::String, eigsolve_tol::Float64, eigsolve_krylovdim::Int64, eigsolve_maxiter::Int64, eigsolve_verbosity::Int64, eigsolve_which_eigenvalue::Symbol, ishermitian::Bool)
    @ ITensors.ITensorMPS ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:206
 [27] #dmrg#509
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:28 [inlined]
 [28] #dmrg#515
    @ ~/.julia/packages/ITensors/kHYfQ/src/lib/ITensorMPS/src/dmrg.jl:388 [inlined]
 [29] main(N::Int64, g::Float64, penalty::Float64, D_max::Int64)
    @ Main ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:178
 [30] top-level scope
    @ ~/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
in expression starting at /home/matteo.wauters/LGT/D3_plaquette/Deconfinement-in-discrete-non-Abelian-gauge-theories/D_4/D_4_dmrg_corner_ch_1.jl:248
/var/spool/pbs/mom_priv/jobs/4243675.hpc-head-n1.unitn.it.SC: line 20: 50503 Killed                  julia $mydir/D_4_dmrg_corner_ch_1.jl $N $g 1 200
